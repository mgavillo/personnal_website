{"ast":null,"code":"import { DataTexture, FloatType, MathUtils, RGBFormat, ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nclass GlitchPass extends Pass {\n  constructor() {\n    let dt_size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 64;\n    super();\n    if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on DigitalGlitch');\n    const shader = DigitalGlitch;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); //default seeding\n\n    this.uniforms['byp'].value = 0;\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n\n    this.curF++;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size * 3);\n    const length = dt_size * dt_size;\n\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i * 3 + 0] = val;\n      data_arr[i * 3 + 1] = val;\n      data_arr[i * 3 + 2] = val;\n    }\n\n    return new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType);\n  }\n\n}\n\nexport { GlitchPass };","map":{"version":3,"sources":["/home/marie/Documents/code/personnal_website/node_modules/three/examples/jsm/postprocessing/GlitchPass.js"],"names":["DataTexture","FloatType","MathUtils","RGBFormat","ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","DigitalGlitch","GlitchPass","constructor","dt_size","undefined","console","error","shader","uniforms","clone","value","generateHeightmap","material","vertexShader","fragmentShader","fsQuad","goWild","curF","generateTrigger","render","renderer","writeBuffer","readBuffer","texture","Math","random","randX","randFloat","PI","renderToScreen","setRenderTarget","clear","randInt","data_arr","Float32Array","length","i","val"],"mappings":"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","sourcesContent":["import {\n\tDataTexture,\n\tFloatType,\n\tMathUtils,\n\tRGBFormat,\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nclass GlitchPass extends Pass {\n\n\tconstructor( dt_size = 64 ) {\n\n\t\tsuper();\n\n\t\tif ( DigitalGlitch === undefined ) console.error( 'THREE.GlitchPass relies on DigitalGlitch' );\n\n\t\tconst shader = DigitalGlitch;\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.uniforms[ 'tDisp' ].value = this.generateHeightmap( dt_size );\n\n\t\tthis.material = new ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis.goWild = false;\n\t\tthis.curF = 0;\n\t\tthis.generateTrigger();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'seed' ].value = Math.random();//default seeding\n\t\tthis.uniforms[ 'byp' ].value = 0;\n\n\t\tif ( this.curF % this.randX == 0 || this.goWild == true ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.curF = 0;\n\t\t\tthis.generateTrigger();\n\n\t\t} else if ( this.curF % this.randX < this.randX / 5 ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\n\t\t} else if ( this.goWild == false ) {\n\n\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t}\n\n\t\tthis.curF ++;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tgenerateTrigger() {\n\n\t\tthis.randX = MathUtils.randInt( 120, 240 );\n\n\t}\n\n\tgenerateHeightmap( dt_size ) {\n\n\t\tconst data_arr = new Float32Array( dt_size * dt_size * 3 );\n\t\tconst length = dt_size * dt_size;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst val = MathUtils.randFloat( 0, 1 );\n\t\t\tdata_arr[ i * 3 + 0 ] = val;\n\t\t\tdata_arr[ i * 3 + 1 ] = val;\n\t\t\tdata_arr[ i * 3 + 2 ] = val;\n\n\t\t}\n\n\t\treturn new DataTexture( data_arr, dt_size, dt_size, RGBFormat, FloatType );\n\n\t}\n\n}\n\nexport { GlitchPass };\n"]},"metadata":{},"sourceType":"module"}