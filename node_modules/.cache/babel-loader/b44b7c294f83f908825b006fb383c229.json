{"ast":null,"code":"import { AdditiveBlending, LinearFilter, RGBAFormat, ShaderMaterial, UniformsUtils, Vector2, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor() {\n    let strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    let sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    super(); // render targets\n\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution, pars);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution, pars);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // copy material\n\n    if (CopyShader === undefined) console.error('THREE.BloomPass relies on CopyShader');\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms['opacity'].value = strength;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('THREE.BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        'KERNEL_SIZE_FLOAT': kernelSize.toFixed(1),\n        'KERNEL_SIZE_INT': kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(null);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nBloomPass.blurX = new Vector2(0.001953125, 0.0);\nBloomPass.blurY = new Vector2(0.0, 0.001953125);\nexport { BloomPass };","map":{"version":3,"sources":["/home/marie/Documents/code/personnal_website/node_modules/three/examples/jsm/postprocessing/BloomPass.js"],"names":["AdditiveBlending","LinearFilter","RGBAFormat","ShaderMaterial","UniformsUtils","Vector2","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","ConvolutionShader","BloomPass","constructor","strength","kernelSize","sigma","resolution","pars","minFilter","magFilter","format","renderTargetX","texture","name","renderTargetY","undefined","console","error","copyShader","copyUniforms","clone","uniforms","value","materialCopy","vertexShader","fragmentShader","blending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","toFixed","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY"],"mappings":"AAAA,SACCA,gBADD,EAECC,YAFD,EAGCC,UAHD,EAICC,cAJD,EAKCC,aALD,EAMCC,OAND,EAOCC,iBAPD,QAQO,OARP;AASA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;;AAEA,MAAMC,SAAN,SAAwBJ,IAAxB,CAA6B;AAE5BK,EAAAA,WAAW,GAA+D;AAAA,QAA7DC,QAA6D,uEAAlD,CAAkD;AAAA,QAA/CC,UAA+C,uEAAlC,EAAkC;AAAA,QAA9BC,KAA8B,uEAAtB,CAAsB;AAAA,QAAnBC,UAAmB,uEAAN,GAAM;AAEzE,YAFyE,CAIzE;;AAEA,UAAMC,IAAI,GAAG;AAAEC,MAAAA,SAAS,EAAEjB,YAAb;AAA2BkB,MAAAA,SAAS,EAAElB,YAAtC;AAAoDmB,MAAAA,MAAM,EAAElB;AAA5D,KAAb;AAEA,SAAKmB,aAAL,GAAqB,IAAIf,iBAAJ,CAAuBU,UAAvB,EAAmCA,UAAnC,EAA+CC,IAA/C,CAArB;AACA,SAAKI,aAAL,CAAmBC,OAAnB,CAA2BC,IAA3B,GAAkC,aAAlC;AACA,SAAKC,aAAL,GAAqB,IAAIlB,iBAAJ,CAAuBU,UAAvB,EAAmCA,UAAnC,EAA+CC,IAA/C,CAArB;AACA,SAAKO,aAAL,CAAmBF,OAAnB,CAA2BC,IAA3B,GAAkC,aAAlC,CAXyE,CAazE;;AAEA,QAAKd,UAAU,KAAKgB,SAApB,EAAgCC,OAAO,CAACC,KAAR,CAAe,sCAAf;AAEhC,UAAMC,UAAU,GAAGnB,UAAnB;AAEA,SAAKoB,YAAL,GAAoBzB,aAAa,CAAC0B,KAAd,CAAqBF,UAAU,CAACG,QAAhC,CAApB;AAEA,SAAKF,YAAL,CAAmB,SAAnB,EAA+BG,KAA/B,GAAuCnB,QAAvC;AAEA,SAAKoB,YAAL,GAAoB,IAAI9B,cAAJ,CAAoB;AAEvC4B,MAAAA,QAAQ,EAAE,KAAKF,YAFwB;AAGvCK,MAAAA,YAAY,EAAEN,UAAU,CAACM,YAHc;AAIvCC,MAAAA,cAAc,EAAEP,UAAU,CAACO,cAJY;AAKvCC,MAAAA,QAAQ,EAAEpC,gBAL6B;AAMvCqC,MAAAA,WAAW,EAAE;AAN0B,KAApB,CAApB,CAvByE,CAiCzE;;AAEA,QAAK3B,iBAAiB,KAAKe,SAA3B,EAAuCC,OAAO,CAACC,KAAR,CAAe,6CAAf;AAEvC,UAAMW,iBAAiB,GAAG5B,iBAA1B;AAEA,SAAK6B,mBAAL,GAA2BnC,aAAa,CAAC0B,KAAd,CAAqBQ,iBAAiB,CAACP,QAAvC,CAA3B;AAEA,SAAKQ,mBAAL,CAA0B,iBAA1B,EAA8CP,KAA9C,GAAsDrB,SAAS,CAAC6B,KAAhE;AACA,SAAKD,mBAAL,CAA0B,SAA1B,EAAsCP,KAAtC,GAA8CtB,iBAAiB,CAAC+B,WAAlB,CAA+B1B,KAA/B,CAA9C;AAEA,SAAK2B,mBAAL,GAA2B,IAAIvC,cAAJ,CAAoB;AAE9C4B,MAAAA,QAAQ,EAAE,KAAKQ,mBAF+B;AAG9CL,MAAAA,YAAY,EAAEI,iBAAiB,CAACJ,YAHc;AAI9CC,MAAAA,cAAc,EAAEG,iBAAiB,CAACH,cAJY;AAK9CQ,MAAAA,OAAO,EAAE;AACR,6BAAqB7B,UAAU,CAAC8B,OAAX,CAAoB,CAApB,CADb;AAER,2BAAmB9B,UAAU,CAAC8B,OAAX,CAAoB,CAApB;AAFX;AALqC,KAApB,CAA3B;AAYA,SAAKC,SAAL,GAAiB,KAAjB;AAEA,SAAKC,MAAL,GAAc,IAAItC,cAAJ,CAAoB,IAApB,CAAd;AAEA;;AAEDuC,EAAAA,MAAM,CAAEC,QAAF,EAAYC,WAAZ,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,UAAhD,EAA6D;AAElE,QAAKA,UAAL,EAAkBJ,QAAQ,CAACK,KAAT,CAAeC,OAAf,CAAuBC,OAAvB,CAA+BC,OAA/B,CAAwC,KAAxC,EAFgD,CAIlE;;AAEA,SAAKV,MAAL,CAAYW,QAAZ,GAAuB,KAAKf,mBAA5B;AAEA,SAAKH,mBAAL,CAA0B,UAA1B,EAAuCP,KAAvC,GAA+CkB,UAAU,CAAC5B,OAA1D;AACA,SAAKiB,mBAAL,CAA0B,iBAA1B,EAA8CP,KAA9C,GAAsDrB,SAAS,CAAC6B,KAAhE;AAEAQ,IAAAA,QAAQ,CAACU,eAAT,CAA0B,KAAKrC,aAA/B;AACA2B,IAAAA,QAAQ,CAACW,KAAT;AACA,SAAKb,MAAL,CAAYC,MAAZ,CAAoBC,QAApB,EAbkE,CAgBlE;;AAEA,SAAKT,mBAAL,CAA0B,UAA1B,EAAuCP,KAAvC,GAA+C,KAAKX,aAAL,CAAmBC,OAAlE;AACA,SAAKiB,mBAAL,CAA0B,iBAA1B,EAA8CP,KAA9C,GAAsDrB,SAAS,CAACiD,KAAhE;AAEAZ,IAAAA,QAAQ,CAACU,eAAT,CAA0B,KAAKlC,aAA/B;AACAwB,IAAAA,QAAQ,CAACW,KAAT;AACA,SAAKb,MAAL,CAAYC,MAAZ,CAAoBC,QAApB,EAvBkE,CAyBlE;;AAEA,SAAKF,MAAL,CAAYW,QAAZ,GAAuB,KAAKxB,YAA5B;AAEA,SAAKJ,YAAL,CAAmB,UAAnB,EAAgCG,KAAhC,GAAwC,KAAKR,aAAL,CAAmBF,OAA3D;AAEA,QAAK8B,UAAL,EAAkBJ,QAAQ,CAACK,KAAT,CAAeC,OAAf,CAAuBC,OAAvB,CAA+BC,OAA/B,CAAwC,IAAxC;AAElBR,IAAAA,QAAQ,CAACU,eAAT,CAA0BR,UAA1B;AACA,QAAK,KAAKS,KAAV,EAAkBX,QAAQ,CAACW,KAAT;AAClB,SAAKb,MAAL,CAAYC,MAAZ,CAAoBC,QAApB;AAEA;;AArG2B;;AAyG7BrC,SAAS,CAAC6B,KAAV,GAAkB,IAAInC,OAAJ,CAAa,WAAb,EAA0B,GAA1B,CAAlB;AACAM,SAAS,CAACiD,KAAV,GAAkB,IAAIvD,OAAJ,CAAa,GAAb,EAAkB,WAAlB,CAAlB;AAEA,SAASM,SAAT","sourcesContent":["import {\n\tAdditiveBlending,\n\tLinearFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n\n\tconstructor( strength = 1, kernelSize = 25, sigma = 4, resolution = 256 ) {\n\n\t\tsuper();\n\n\t\t// render targets\n\n\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\tthis.renderTargetX = new WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetX.texture.name = 'BloomPass.x';\n\t\tthis.renderTargetY = new WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetY.texture.name = 'BloomPass.y';\n\n\t\t// copy material\n\n\t\tif ( CopyShader === undefined ) console.error( 'THREE.BloomPass relies on CopyShader' );\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.copyUniforms[ 'opacity' ].value = strength;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tif ( ConvolutionShader === undefined ) console.error( 'THREE.BloomPass relies on ConvolutionShader' );\n\n\t\tconst convolutionShader = ConvolutionShader;\n\n\t\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\t\tthis.convolutionUniforms[ 'cKernel' ].value = ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader: convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\n\t\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\n\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this.renderTargetX.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n}\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\nexport { BloomPass };\n"]},"metadata":{},"sourceType":"module"}