{"ast":null,"code":"import { Color, MeshDepthMaterial, NearestFilter, NoBlending, RGBADepthPacking, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n/**\n * Depth-of-field post-process with bokeh shader\n */\n\nclass BokehPass extends Pass {\n  constructor(scene, camera, params) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    const focus = params.focus !== undefined ? params.focus : 1.0;\n    const aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n    const aperture = params.aperture !== undefined ? params.aperture : 0.025;\n    const maxblur = params.maxblur !== undefined ? params.maxblur : 1.0; // render targets\n\n    const width = params.width || window.innerWidth || 1;\n    const height = params.height || window.innerHeight || 1;\n    this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.renderTargetDepth.texture.name = 'BokehPass.depth'; // depth material\n\n    this.materialDepth = new MeshDepthMaterial();\n    this.materialDepth.depthPacking = RGBADepthPacking;\n    this.materialDepth.blending = NoBlending; // bokeh material\n\n    if (BokehShader === undefined) {\n      console.error('THREE.BokehPass relies on BokehShader');\n    }\n\n    const bokehShader = BokehShader;\n    const bokehUniforms = UniformsUtils.clone(bokehShader.uniforms);\n    bokehUniforms['tDepth'].value = this.renderTargetDepth.texture;\n    bokehUniforms['focus'].value = focus;\n    bokehUniforms['aspect'].value = aspect;\n    bokehUniforms['aperture'].value = aperture;\n    bokehUniforms['maxblur'].value = maxblur;\n    bokehUniforms['nearClip'].value = camera.near;\n    bokehUniforms['farClip'].value = camera.far;\n    this.materialBokeh = new ShaderMaterial({\n      defines: Object.assign({}, bokehShader.defines),\n      uniforms: bokehUniforms,\n      vertexShader: bokehShader.vertexShader,\n      fragmentShader: bokehShader.fragmentShader\n    });\n    this.uniforms = bokehUniforms;\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialBokeh);\n    this._oldClearColor = new Color();\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Render depth into texture\n    this.scene.overrideMaterial = this.materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(0xffffff);\n    renderer.setClearAlpha(1.0);\n    renderer.setRenderTarget(this.renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Render bokeh composite\n\n    this.uniforms['tColor'].value = readBuffer.texture;\n    this.uniforms['nearClip'].value = this.camera.near;\n    this.uniforms['farClip'].value = this.camera.far;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n\n}\n\nexport { BokehPass };","map":{"version":3,"sources":["/home/marie/Documents/code/personnal_website/node_modules/three/examples/jsm/postprocessing/BokehPass.js"],"names":["Color","MeshDepthMaterial","NearestFilter","NoBlending","RGBADepthPacking","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","BokehShader","BokehPass","constructor","scene","camera","params","focus","undefined","aspect","aperture","maxblur","width","window","innerWidth","height","innerHeight","renderTargetDepth","minFilter","magFilter","texture","name","materialDepth","depthPacking","blending","console","error","bokehShader","bokehUniforms","clone","uniforms","value","near","far","materialBokeh","defines","Object","assign","vertexShader","fragmentShader","needsSwap","fsQuad","_oldClearColor","render","renderer","writeBuffer","readBuffer","overrideMaterial","getClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","setClearAlpha","setRenderTarget","clear","renderToScreen"],"mappings":"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","sourcesContent":["import {\n\tColor,\n\tMeshDepthMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRGBADepthPacking,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n\n/**\n * Depth-of-field post-process with bokeh shader\n */\n\nclass BokehPass extends Pass {\n\n\tconstructor( scene, camera, params ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tconst focus = ( params.focus !== undefined ) ? params.focus : 1.0;\n\t\tconst aspect = ( params.aspect !== undefined ) ? params.aspect : camera.aspect;\n\t\tconst aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;\n\t\tconst maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;\n\n\t\t// render targets\n\n\t\tconst width = params.width || window.innerWidth || 1;\n\t\tconst height = params.height || window.innerHeight || 1;\n\n\t\tthis.renderTargetDepth = new WebGLRenderTarget( width, height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\tthis.renderTargetDepth.texture.name = 'BokehPass.depth';\n\n\t\t// depth material\n\n\t\tthis.materialDepth = new MeshDepthMaterial();\n\t\tthis.materialDepth.depthPacking = RGBADepthPacking;\n\t\tthis.materialDepth.blending = NoBlending;\n\n\t\t// bokeh material\n\n\t\tif ( BokehShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BokehPass relies on BokehShader' );\n\n\t\t}\n\n\t\tconst bokehShader = BokehShader;\n\t\tconst bokehUniforms = UniformsUtils.clone( bokehShader.uniforms );\n\n\t\tbokehUniforms[ 'tDepth' ].value = this.renderTargetDepth.texture;\n\n\t\tbokehUniforms[ 'focus' ].value = focus;\n\t\tbokehUniforms[ 'aspect' ].value = aspect;\n\t\tbokehUniforms[ 'aperture' ].value = aperture;\n\t\tbokehUniforms[ 'maxblur' ].value = maxblur;\n\t\tbokehUniforms[ 'nearClip' ].value = camera.near;\n\t\tbokehUniforms[ 'farClip' ].value = camera.far;\n\n\t\tthis.materialBokeh = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, bokehShader.defines ),\n\t\t\tuniforms: bokehUniforms,\n\t\t\tvertexShader: bokehShader.vertexShader,\n\t\t\tfragmentShader: bokehShader.fragmentShader\n\t\t} );\n\n\t\tthis.uniforms = bokehUniforms;\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new FullScreenQuad( this.materialBokeh );\n\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t// Render depth into texture\n\n\t\tthis.scene.overrideMaterial = this.materialDepth;\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tconst oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( 0xffffff );\n\t\trenderer.setClearAlpha( 1.0 );\n\t\trenderer.setRenderTarget( this.renderTargetDepth );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// Render bokeh composite\n\n\t\tthis.uniforms[ 'tColor' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'nearClip' ].value = this.camera.near;\n\t\tthis.uniforms[ 'farClip' ].value = this.camera.far;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.setClearColor( this._oldClearColor );\n\t\trenderer.setClearAlpha( oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { BokehPass };\n"]},"metadata":{},"sourceType":"module"}